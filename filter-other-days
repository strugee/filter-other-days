#!/bin/sh

#
# Copyright 2017, 2018 AJ Jordan <alex@strugee.net>
#
# This file is part of filter-other-days.
#
# filter-other-days is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# filter-other-days is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License along with filter-other-days.  If not, see
# <https://www.gnu.org/licenses/>.

# This script exclusively uses `grep -v` to ensure it never discards log entries from today, ever.
# The rationale is that it's better to receive irrelevant information than it is to miss relevant information.
#
# This design becomes security-critical in implementations of Artificial Ignorance.
#
# This file is split up into multiple sections - each one corresponds to one family of logfile timestamp styles

export POSIXLY_CORRECT=

seq() {
	if ! [ -z ${2+x} ]; then
		min=$1
		max=$2
	else
		min=1
		max=$1
	fi

	echo $min
	until [ $min = $max ]; do
		min=$((min+1))
		echo $min
	done
}

# Feature-test for -d support

D_SUPPORTED=false

alias D_FEATURE_TEST_GNU="TZ=UTC date -d @0 2>&1"

# wc -l to make sure nothing's on stderr

if D_FEATURE_TEST_GNU | grep 1970 >/dev/null && [ $(D_FEATURE_TEST_GNU | wc -l) = 1 ]; then
	D_SUPPORTED=true
fi

alias D_FEATURE_TEST_BSD="TZ=UTC date -r 0 2>&1"

if D_FEATURE_TEST_BSD | grep 1970 >/dev/null && [ $(D_FEATURE_TEST_BSD | wc -l) = 1 ]; then
	D_SUPPORTED=true
fi

while [ $# -gt 0 ]; do
	# -v
	if [ $1 = --version ] || [ $1 = -v ]; then
cat <<EOF
filter-other-days 1.0.1
Copyright (C) 2017, 2018 AJ Jordan <alex@strugee.net>.
License AGPLv3+: GNU AGPL version 3 or later <https://gnu.org/licenses/agpl-3.0.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by AJ Jordan.
EOF
		exit 0
	fi

	# -h
	if [ $1 = --help ] || [ $1 = -h ]; then
cat <<EOF
Usage: $0 [OPTION]...
Filter logfiles for today's date in an Artificial Ignorance-compatible way.

  -h, --help     display this help and exit
  -v, --version  output version information and exit
EOF

# TODO if we're on a GNU system, should we try to accept everything GNU `date -d` accepts?

if $D_SUPPORTED; then
	echo '  -d             use this as current seconds since the epoch'
fi

cat <<EOF

Examples:
  echo '2017-01-01' | $0
  cat daemon.log syslog.log | $0
  $0 < logfile
EOF
		exit 0
	fi

	# -d
	if [ $1 = '-d' ]; then
		if ! $D_SUPPORTED; then
			echo $0: option not available on this system -- '-d' 2>&1
			exit 1
		fi

		if [ -z ${2+x} ]; then
			echo $0: option requires an argument -- '-d' 2>&1
			echo Try \'$0 --help\' for more information. 2>&1
			exit 1
		fi

		D_FEATURE_TEST_GNU >/dev/null 2>&1 && DATE_FLAGS="-d @$2"
		D_FEATURE_TEST_BSD >/dev/null 2>&1 && DATE_FLAGS="-r $2"

		shift 2
		continue
	fi

	echo $0: unrecognized option \'$1\' 2>&1
	echo Try \'$0 --help\' for more information. 2>&1
	exit 1
done

#
# HUMAN-READABLE
#
# E.g.:
#
#   Jan  1 03:44:00 hostname <message>
#   January  1 03:44:00 hostname <message>
#   Jan  01 03:44:00 hostname <message>
#   January  01 03:44:00 hostname <message>
#

# Base dataset

FULL_MONTHS="January
February
March
April
May
June
July
August
September
October
November
December"

SHORT_MONTHS=$(echo "$FULL_MONTHS" | cut -c -3)

FULL_DAYS=$(seq 31 | sed 's/^/0/g' | sed 's/0\(..\)/\1/g')
DAYS=$(seq 31)
ALL_DAYS=$(printf "$FULL_DAYS\n$DAYS\n" | sort | uniq)

# Current values

NOW_SHORT_MONTH=$(date $DATE_FLAGS +%b)
NOW_FULL_MONTH=$(date $DATE_FLAGS +%B)
NOW_FULL_DAY=$(date $DATE_FLAGS +%d)
NOW_DAY=$(echo $NOW_FULL_DAY | sed 's/^0//')

# Filtered dataset

OTHER_SHORT_MONTHS=$(echo "$SHORT_MONTHS" | grep -Fxv $NOW_SHORT_MONTH)
OTHER_FULL_MONTHS=$(echo "$FULL_MONTHS" | grep -Fxv $NOW_FULL_MONTH)
OTHER_DAYS=$(echo "$DAYS" | grep -Fxv $NOW_DAY)
OTHER_FULL_DAYS=$(echo "$FULL_DAYS" | grep -Fxv $NOW_FULL_DAY)
OTHER_ALL_DAYS=$(printf "$OTHER_FULL_DAYS\n$OTHER_DAYS\n" | sort | uniq)

# Built regexps

# Unquoted on purpose so the shell turns newlines into spaces
FULL_MONTHS_REGEX=$(echo $OTHER_FULL_MONTHS | sed 's/ /|/g')
SHORT_MONTHS_REGEX=$(echo $OTHER_SHORT_MONTHS | sed 's/ /|/g')
ALL_DAYS_REGEX=$(echo $ALL_DAYS | sed 's/ /|/g')
DAY_REGEX=$(echo $OTHER_ALL_DAYS | sed 's/ /|/g')

#
# STANDARD
#
# E.g.:
#
#   2017-01-01 06:12:18 <message>
#

STANDARD_YEARS=$(seq 2000 $(($(date $DATE_FLAGS +%Y)+5)))
STANDARD_MONTHS_NUM=$(seq 12 | sed 's/^/0/g' | sed 's/0\(..\)/\1/g')

NOW_YEAR=$(date $DATE_FLAGS +%Y)
NOW_MONTH_NUM=$(date $DATE_FLAGS +%m)

OTHER_MONTHS_NUM=$(echo "$STANDARD_MONTHS_NUM" | grep -v $NOW_MONTH_NUM)
OTHER_STANDARD_YEARS=$(echo "$STANDARD_YEARS" | grep -v $NOW_YEAR)

YEARS_REGEX=$(echo $STANDARD_YEARS | sed 's/ /|/g')
OTHER_YEARS_REGEX=$(echo $OTHER_STANDARD_YEARS | sed 's/ /|/g')
STANDARD_MONTHS_REGEX=$(echo $STANDARD_MONTHS_NUM | sed 's/ /|/g')
OTHER_STANDARD_MONTHS_REGEX=$(echo $OTHER_MONTHS_NUM | sed 's/ /|/g')

#
# ACTUAL `grep` INVOCATION
#

# We have to do the human-readable variants in two passes because we can't exclude today's day for other months
# E.g. if it's October 1st, we still want to match September 1st so we use $ALL_DAYS_REGEX, not $DAYS_REGEX
grep -E -v \
-e "($FULL_MONTHS_REGEX|$SHORT_MONTHS_REGEX)[[:space:]]+($ALL_DAYS_REGEX)[[:space:]]" \
-e "($NOW_SHORT_MONTH|$NOW_FULL_MONTH)[[:space:]]+($DAY_REGEX)[[:space:]]" \
-e "($YEARS_REGEX)-($OTHER_STANDARD_MONTHS_REGEX)-($ALL_DAYS_REGEX)[[:space:]]" \
-e "($YEARS_REGEX)-$NOW_MONTH_NUM-($DAY_REGEX)[[:space:]]" \
-e "($OTHER_YEARS_REGEX)-($STANDARD_MONTHS_REGEX)-($ALL_DAYS_REGEX)[[:space:]]"
